"""
Interactive HTML Report Generator with Charts and Download Functionality
"""
import json
import csv
from datetime import datetime, timedelta
from pathlib import Path
import webbrowser
import base64
from io import BytesIO

try:
    import matplotlib.pyplot as plt
    import pandas as pd
    import seaborn as sns
    import plotly.graph_objects as go
    import plotly.express as px
    from plotly.offline import plot
    PLOTTING_AVAILABLE = True
except ImportError:
    PLOTTING_AVAILABLE = False

class InteractiveReportGenerator:
    def __init__(self, incident_log_path):
        self.incident_log = Path(incident_log_path)
        self.output_dir = Path.cwd() / "reports"
        self.output_dir.mkdir(exist_ok=True)
        
    def generate_full_report(self):
        """Generate comprehensive interactive HTML report"""
        if not self.incident_log.exists():
            print("No incident log found")
            return None
            
        # Read data
        try:
            df = pd.read_csv(self.incident_log)
        except Exception:
            df = pd.DataFrame()
            
        # Generate report components
        charts_html = self.generate_charts(df) if PLOTTING_AVAILABLE else ""
        stats_html = self.generate_statistics(df)
        table_html = self.generate_incident_table(df)
        
        # Create full HTML report
        html_content = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>HIDR Agent Security Report</title>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <style>
                {self.get_css_styles()}
            </style>
        </head>
        <body>
            <div class="container">
                <header class="report-header">
                    <h1>üõ°Ô∏è HIDR Agent Security Report</h1>
                    <div class="report-meta">
                        <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                        <p><strong>Report Period:</strong> {self.get_report_period(df)}</p>
                        <p><strong>Total Incidents:</strong> {len(df)}</p>
                    </div>
                    <div class="download-section">
                        <button onclick="downloadCSV()" class="download-btn">üìä Download CSV</button>
                        <button onclick="downloadJSON()" class="download-btn">üìÑ Download JSON</button>
                        <button onclick="printReport()" class="download-btn">üñ®Ô∏è Print Report</button>
                    </div>
                </header>
                
                <nav class="report-nav">
                    <a href="#summary" class="nav-link">Summary</a>
                    <a href="#charts" class="nav-link">Analytics</a>
                    <a href="#incidents" class="nav-link">Incidents</a>
                    <a href="#recommendations" class="nav-link">Recommendations</a>
                </nav>
                
                <section id="summary" class="report-section">
                    <h2>üìà Executive Summary</h2>
                    {stats_html}
                </section>
                
                <section id="charts" class="report-section">
                    <h2>üìä Security Analytics</h2>
                    {charts_html}
                </section>
                
                <section id="incidents" class="report-section">
                    <h2>üö® Incident Details</h2>
                    {table_html}
                </section>
                
                <section id="recommendations" class="report-section">
                    <h2>üí° Security Recommendations</h2>
                    {self.generate_recommendations(df)}
                </section>
                
                <footer class="report-footer">
                    <p>Generated by HIDR Agent v1.0 | ¬© 2024 Security Analytics</p>
                </footer>
            </div>
            
            <script>
                {self.get_javascript_functions(df)}
            </script>
        </body>
        </html>
        """
        
        # Save report
        report_path = self.output_dir / f"security_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        print(f"Interactive report generated: {report_path}")
        return report_path
        
    def generate_charts(self, df):
        """Generate interactive Plotly charts"""
        if df.empty:
            return "<p>No data available for charts.</p>"
            
        charts_html = ""
        
        try:
            # Convert timestamp to datetime
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            # Timeline Chart
            timeline_fig = self.create_timeline_chart(df)
            charts_html += f'<div class="chart-container"><h3>Incident Timeline</h3><div id="timeline-chart">{timeline_fig}</div></div>'
            
            # Threat Distribution Pie Chart
            pie_fig = self.create_threat_pie_chart(df)
            charts_html += f'<div class="chart-container"><h3>Threat Distribution</h3><div id="pie-chart">{pie_fig}</div></div>'
            
            # Hourly Activity Heatmap
            heatmap_fig = self.create_activity_heatmap(df)
            charts_html += f'<div class="chart-container"><h3>Activity Heatmap</h3><div id="heatmap-chart">{heatmap_fig}</div></div>'
            
            # Process Activity Bar Chart
            process_fig = self.create_process_chart(df)
            charts_html += f'<div class="chart-container"><h3>Process Activity</h3><div id="process-chart">{process_fig}</div></div>'
            
        except Exception as e:
            charts_html = f"<p>Error generating charts: {str(e)}</p>"
            
        return charts_html
        
    def create_timeline_chart(self, df):
        """Create interactive timeline chart"""
        daily_counts = df.groupby(df['timestamp'].dt.date).size().reset_index()
        daily_counts.columns = ['date', 'incidents']
        
        fig = px.line(daily_counts, x='date', y='incidents', 
                     title='Security Incidents Over Time',
                     markers=True)
        fig.update_layout(
            xaxis_title="Date",
            yaxis_title="Number of Incidents",
            hovermode='x unified'
        )
        
        return plot(fig, output_type='div', include_plotlyjs=False)
        
    def create_threat_pie_chart(self, df):
        """Create threat distribution pie chart"""
        threat_counts = df['type'].value_counts()
        
        fig = px.pie(values=threat_counts.values, names=threat_counts.index,
                    title='Threat Distribution by Type')
        fig.update_traces(textposition='inside', textinfo='percent+label')
        
        return plot(fig, output_type='div', include_plotlyjs=False)
        
    def create_activity_heatmap(self, df):
        """Create activity heatmap by hour and day"""
        df['hour'] = df['timestamp'].dt.hour
        df['day'] = df['timestamp'].dt.day_name()
        
        heatmap_data = df.groupby(['day', 'hour']).size().unstack(fill_value=0)
        
        fig = px.imshow(heatmap_data.values,
                       x=heatmap_data.columns,
                       y=heatmap_data.index,
                       title='Activity Heatmap (Day vs Hour)',
                       color_continuous_scale='Reds')
        
        return plot(fig, output_type='div', include_plotlyjs=False)
        
    def create_process_chart(self, df):
        """Create process activity bar chart"""
        process_counts = df[df['type'] == 'suspicious_process']['process_name'].value_counts().head(10)
        
        if not process_counts.empty:
            fig = px.bar(x=process_counts.values, y=process_counts.index,
                        orientation='h',
                        title='Top Suspicious Processes')
            fig.update_layout(
                xaxis_title="Number of Detections",
                yaxis_title="Process Name"
            )
        else:
            fig = go.Figure()
            fig.add_annotation(text="No process data available", 
                             xref="paper", yref="paper",
                             x=0.5, y=0.5, showarrow=False)
            
        return plot(fig, output_type='div', include_plotlyjs=False)
        
    def generate_statistics(self, df):
        """Generate statistics summary"""
        if df.empty:
            return "<div class='stat-card alert'>No incidents recorded</div>"
            
        total_incidents = len(df)
        process_alerts = len(df[df['type'] == 'suspicious_process'])
        file_alerts = len(df[df['type'].isin(['file_modified', 'file_deleted'])])
        
        # Calculate trends
        if len(df) > 1:
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            recent_24h = df[df['timestamp'] > (datetime.now() - timedelta(hours=24))]
            trend_24h = len(recent_24h)
        else:
            trend_24h = 0
            
        stats_html = f"""
        <div class="stats-grid">
            <div class="stat-card">
                <h3>{total_incidents}</h3>
                <p>Total Incidents</p>
            </div>
            <div class="stat-card">
                <h3>{process_alerts}</h3>
                <p>Process Alerts</p>
            </div>
            <div class="stat-card">
                <h3>{file_alerts}</h3>
                <p>File Events</p>
            </div>
            <div class="stat-card">
                <h3>{trend_24h}</h3>
                <p>Last 24 Hours</p>
            </div>
        </div>
        
        <div class="summary-text">
            <p>The HIDR Agent has detected <strong>{total_incidents}</strong> security incidents during the monitoring period. 
            This includes <strong>{process_alerts}</strong> suspicious process activities and <strong>{file_alerts}</strong> file system events.</p>
            
            <p>In the last 24 hours, <strong>{trend_24h}</strong> incidents were recorded, indicating 
            {'high' if trend_24h > 10 else 'moderate' if trend_24h > 5 else 'low'} security activity.</p>
        </div>
        """
        
        return stats_html
        
    def generate_incident_table(self, df):
        """Generate interactive incident table"""
        if df.empty:
            return "<p>No incidents to display.</p>"
            
        # Limit to recent incidents for display
        recent_df = df.tail(100)
        
        table_html = """
        <div class="table-controls">
            <input type="text" id="search-input" placeholder="Search incidents..." onkeyup="filterTable()">
            <select id="type-filter" onchange="filterTable()">
                <option value="">All Types</option>
                <option value="suspicious_process">Process Alerts</option>
                <option value="file_modified">File Modified</option>
                <option value="file_deleted">File Deleted</option>
            </select>
        </div>
        
        <div class="table-wrapper">
            <table id="incidents-table" class="incidents-table">
                <thead>
                    <tr>
                        <th onclick="sortTable(0)">Timestamp ‚Üï</th>
                        <th onclick="sortTable(1)">Type ‚Üï</th>
                        <th onclick="sortTable(2)">Process/File ‚Üï</th>
                        <th onclick="sortTable(3)">Action ‚Üï</th>
                        <th onclick="sortTable(4)">Details ‚Üï</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        for _, row in recent_df.iterrows():
            severity_class = self.get_severity_class(row['type'])
            table_html += f"""
                <tr class="{severity_class}">
                    <td>{row['timestamp']}</td>
                    <td><span class="type-badge {row['type']}">{row['type']}</span></td>
                    <td>{row.get('process_name', row.get('path', 'N/A'))}</td>
                    <td>{row.get('action', 'N/A')}</td>
                    <td>{row.get('details', 'N/A')}</td>
                </tr>
            """
            
        table_html += """
                </tbody>
            </table>
        </div>
        """
        
        return table_html
        
    def generate_recommendations(self, df):
        """Generate security recommendations based on data"""
        recommendations = []
        
        if df.empty:
            recommendations.append("‚úÖ No security incidents detected. System appears secure.")
        else:
            process_alerts = len(df[df['type'] == 'suspicious_process'])
            file_alerts = len(df[df['type'].isin(['file_modified', 'file_deleted'])])
            
            if process_alerts > 5:
                recommendations.append("‚ö†Ô∏è High number of process alerts detected. Review allowlist configuration.")
                
            if file_alerts > 10:
                recommendations.append("üîí Multiple file modifications detected. Consider implementing stricter file protection.")
                
            # Check for patterns
            if not df.empty:
                df['timestamp'] = pd.to_datetime(df['timestamp'])
                recent_activity = df[df['timestamp'] > (datetime.now() - timedelta(hours=1))]
                if len(recent_activity) > 5:
                    recommendations.append("üö® High recent activity detected. Investigate potential ongoing attack.")
                    
        # General recommendations
        recommendations.extend([
            "üîÑ Regularly update the HIDR agent and threat signatures",
            "üìä Review incident reports weekly for trend analysis",
            "üõ°Ô∏è Ensure all critical files are backed up regularly",
            "üë• Train users on security best practices",
            "üîç Consider integrating with SIEM for centralized monitoring"
        ])
        
        rec_html = "<ul class='recommendations-list'>"
        for rec in recommendations:
            rec_html += f"<li>{rec}</li>"
        rec_html += "</ul>"
        
        return rec_html
        
    def get_severity_class(self, incident_type):
        """Get CSS class based on incident severity"""
        severity_map = {
            'suspicious_process': 'high-severity',
            'file_modified': 'medium-severity',
            'file_deleted': 'high-severity'
        }
        return severity_map.get(incident_type, 'low-severity')
        
    def get_report_period(self, df):
        """Get report period string"""
        if df.empty:
            return "No data"
            
        try:
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            start_date = df['timestamp'].min().strftime('%Y-%m-%d')
            end_date = df['timestamp'].max().strftime('%Y-%m-%d')
            return f"{start_date} to {end_date}"
        except Exception:
            return "Unknown period"
            
    def get_css_styles(self):
        """Return CSS styles for the report"""
        return """
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        .report-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .report-header h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
        }
        
        .report-meta {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin: 20px 0;
        }
        
        .download-section {
            margin-top: 20px;
        }
        
        .download-btn {
            background: rgba(255,255,255,0.2);
            color: white;
            border: 2px solid white;
            padding: 10px 20px;
            margin: 0 10px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .download-btn:hover {
            background: white;
            color: #667eea;
        }
        
        .report-nav {
            background: #2c3e50;
            padding: 0;
            display: flex;
            justify-content: center;
        }
        
        .nav-link {
            color: white;
            text-decoration: none;
            padding: 15px 25px;
            transition: background 0.3s;
        }
        
        .nav-link:hover {
            background: #34495e;
        }
        
        .report-section {
            padding: 40px;
            border-bottom: 1px solid #eee;
        }
        
        .report-section h2 {
            color: #2c3e50;
            margin-bottom: 25px;
            font-size: 1.8em;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .stat-card {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            text-align: center;
            border-left: 4px solid #667eea;
        }
        
        .stat-card h3 {
            font-size: 2.5em;
            color: #667eea;
            margin-bottom: 10px;
        }
        
        .chart-container {
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
        }
        
        .table-controls {
            margin: 20px 0;
            display: flex;
            gap: 15px;
        }
        
        .table-controls input, .table-controls select {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }
        
        .table-wrapper {
            overflow-x: auto;
        }
        
        .incidents-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .incidents-table th {
            background: #2c3e50;
            color: white;
            padding: 15px;
            text-align: left;
            cursor: pointer;
        }
        
        .incidents-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
        }
        
        .incidents-table tr:hover {
            background: #f5f5f5;
        }
        
        .type-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
        }
        
        .suspicious_process {
            background: #ff6b6b;
            color: white;
        }
        
        .file_modified {
            background: #ffa726;
            color: white;
        }
        
        .file_deleted {
            background: #ef5350;
            color: white;
        }
        
        .high-severity {
            border-left: 4px solid #ff6b6b;
        }
        
        .medium-severity {
            border-left: 4px solid #ffa726;
        }
        
        .low-severity {
            border-left: 4px solid #66bb6a;
        }
        
        .recommendations-list {
            list-style: none;
            padding: 0;
        }
        
        .recommendations-list li {
            padding: 15px;
            margin: 10px 0;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        
        .report-footer {
            background: #2c3e50;
            color: white;
            text-align: center;
            padding: 20px;
        }
        
        .alert {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
        }
        
        @media print {
            .download-section, .report-nav { display: none; }
            .container { box-shadow: none; }
        }
        """
        
    def get_javascript_functions(self, df):
        """Return JavaScript functions for interactivity"""
        # Convert DataFrame to JSON for client-side operations
        data_json = df.to_json(orient='records') if not df.empty else '[]'
        
        return f"""
        const incidentData = {data_json};
        
        function downloadCSV() {{
            const csvContent = convertToCSV(incidentData);
            downloadFile(csvContent, 'hidr_incidents.csv', 'text/csv');
        }}
        
        function downloadJSON() {{
            const jsonContent = JSON.stringify(incidentData, null, 2);
            downloadFile(jsonContent, 'hidr_incidents.json', 'application/json');
        }}
        
        function printReport() {{
            window.print();
        }}
        
        function downloadFile(content, filename, contentType) {{
            const blob = new Blob([content], {{ type: contentType }});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }}
        
        function convertToCSV(data) {{
            if (data.length === 0) return '';
            
            const headers = Object.keys(data[0]);
            const csvRows = [headers.join(',')];
            
            for (const row of data) {{
                const values = headers.map(header => {{
                    const value = row[header] || '';
                    return `"${{value.toString().replace(/"/g, '""')}}"`;
                }});
                csvRows.push(values.join(','));
            }}
            
            return csvRows.join('\\n');
        }}
        
        function filterTable() {{
            const searchInput = document.getElementById('search-input').value.toLowerCase();
            const typeFilter = document.getElementById('type-filter').value;
            const table = document.getElementById('incidents-table');
            const rows = table.getElementsByTagName('tr');
            
            for (let i = 1; i < rows.length; i++) {{
                const row = rows[i];
                const cells = row.getElementsByTagName('td');
                let showRow = true;
                
                // Search filter
                if (searchInput) {{
                    const rowText = Array.from(cells).map(cell => cell.textContent.toLowerCase()).join(' ');
                    if (!rowText.includes(searchInput)) {{
                        showRow = false;
                    }}
                }}
                
                // Type filter
                if (typeFilter && showRow) {{
                    const typeCell = cells[1];
                    if (typeCell && !typeCell.textContent.includes(typeFilter)) {{
                        showRow = false;
                    }}
                }}
                
                row.style.display = showRow ? '' : 'none';
            }}
        }}
        
        function sortTable(columnIndex) {{
            const table = document.getElementById('incidents-table');
            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = Array.from(tbody.getElementsByTagName('tr'));
            
            rows.sort((a, b) => {{
                const aText = a.getElementsByTagName('td')[columnIndex].textContent;
                const bText = b.getElementsByTagName('td')[columnIndex].textContent;
                return aText.localeCompare(bText);
            }});
            
            rows.forEach(row => tbody.appendChild(row));
        }}
        
        // Smooth scrolling for navigation
        document.querySelectorAll('.nav-link').forEach(link => {{
            link.addEventListener('click', function(e) {{
                e.preventDefault();
                const targetId = this.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                if (targetElement) {{
                    targetElement.scrollIntoView({{ behavior: 'smooth' }});
                }}
            }});
        }});
        """

def main():
    """Generate interactive report"""
    incident_log = Path.cwd() / "incident_report.csv"
    
    generator = InteractiveReportGenerator(incident_log)
    report_path = generator.generate_full_report()
    
    if report_path:
        # Open report in browser
        webbrowser.open(f"file://{report_path.absolute()}")
        print(f"Interactive report opened in browser: {report_path}")
    else:
        print("Failed to generate report")

if __name__ == "__main__":
    main()